# Amadeus group travel

## Mix

```elixir
Mix.install([
  {:kino, "~> 0.4.1"},
  {:req, git: "https://github.com/4bakker/req.git"},
  {:amadeus, git: "https://github.com/4bakker/amadeus.git"}
])
```

```elixir
location_people = %{"AMS" => 3, "BCN" => 1, "LHR" => 2}
dates = ["2022-01-20", "2022-01-22"]

Amadeus.Agent.get_cheapest_location(location_people, dates)
```

## Credentials

```elixir
client_id = Kino.Input.text("client id")
```

```elixir
client_secret = Kino.Input.text("client secret")
```

## Amadeus API

```elixir
defmodule Amadeus do
  @client_id Kino.Input.read(client_id)
  @client_secret Kino.Input.read(client_secret)
  @host "https://test.api.amadeus.com"

  def get_quote(journey, dates, token) do
    [from, to, adults] = journey
    [dep, ret] = dates

    url =
      "#{@host}/v2/shopping/flight-offers?originLocationCode=#{from}&destinationLocationCode=#{to}&departureDate=#{dep}&returnDate=#{ret}&adults=#{adults}&nonStop=true&max=10"

    %Req.Response{status: status, body: body} =
      Req.get!(url,
        headers: [Authorization: "Bearer #{token}"],
        retry: [delay: 500, max_retries: 3]
      )

    case status do
      200 ->
        min =
          body
          |> get_in(["data", Access.all(), "price", "grandTotal"])
          |> Enum.map(&String.to_float/1)
          |> tap(&IO.inspect/1)
          |> Enum.min(fn -> "Not available" end)

        [from, to, min]

      _ ->
        IO.inspect(body)
        [from, to, "Request failed"]
    end
  end

  def get_token do
    url = "#{@host}/v1/security/oauth2/token"

    body =
      {:form,
       [grant_type: "client_credentials", client_id: @client_id, client_secret: @client_secret]}

    %Req.Response{status: 200, body: body} = Req.post!(url, body)
    body["access_token"]
  end
end

# Amadeus.get_quote(["BCN", "LHR", 2], ["2022-01-24", "2022-01-25"], Amadeus.get_token)
```

```elixir
token = Amadeus.get_token()
```

## Input

```elixir
location_people = %{"AMS" => 3, "BCN" => 1, "LHR" => 2}
dates = ["2022-01-20", "2022-01-22"]
```

## Journeys

```elixir
locations = Map.keys(location_people)
journeys = for f <- locations, t <- locations, f != t, do: [f, t, location_people[f]]

quotes =
  journeys
  |> Task.async_stream(&Amadeus.get_quote(&1, dates, token), max_concurrency: 2)
  |> Enum.into([], fn {:ok, res} -> res end)
```

```elixir
cheapest =
  quotes
  |> Enum.group_by(&Enum.at(&1, 1), &Enum.at(&1, 2))
  |> Enum.filter(fn {_k, v} -> Enum.all?(v, &is_float/1) end)
  |> Enum.map(fn {k, v} -> %{k => Float.round(Enum.sum(v), 2)} end)
  |> Enum.min_by(&Map.values/1)
```
